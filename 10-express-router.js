// ************************************************* File ====> routes/admin.js ********************************************
const express = require('express')

// اینجا در این فایل ما نیاز داریم که فقط از قابلیت روتر اکسپرس استفاده کنیم
// و نیازی به استفاده از بقیه قابلیت های اکسپرس نداریم
// پس میایم و یک متغیر میسازیم و از روی اکسپرس بالا مقدار کلاس روترش رو میکشیم بیرون
const router = express.Router()


// اینجا به همون صورت قبل ما روت برای خودمون تعریف میکنیم
router.get('/post/create',(req,res) => {
    res.send("<center><h1>create post</h1></center>")
})

// این هم از اینجا
router.get('/post/show',(req,res) => {
    res.send("<center><h1>show post</h1></center>")
})

// در نهایت ما که اینجا نمیتونیم از این روت ها استفاده کنیم پس نیازه که ببریمشون داخل صفحه اصلی یا فایل اصلی که حاوی سرور هست
module.exports.AdminRouter = router;


// اینجا فایل نگهداری از روت های ادمین پنل اپلیکیشن ما هست



// ************************************************* File ====> app.js ********************************************

const express = require('express')

// خب اینجا با استفاده از آبجکت دیستراکچرینگ
// که البته خیلی هم تاثیر نداره اینجا
// چون تنها ماژولی که ما در فایل admin.js اکسپورت کردیم همین AdminRouter هست
// اینجا گرفتیم اینو
const {AdminRouter} = require("./routes/admin");

const app = express()


// اینجا از قابلیت میدلور اکسپرس استفاده میکنیم
// اینجا به میدلورمون یک روت دادیم به اسم admin
// داخل اکسپرس میدلور ها از بالا اجرا شده و میاد پایین اوکی ؟
// ما اینجا تو اون فایل روت های خودمون رو داریم
// الان قبل اون روت ها باید یک /admin هم قرار بدیم و بعد روت های داخل اون فایل
// اینجوری روت هارو فیلتر میکنیم
// admin/post/create
app.use('/admin',AdminRouter)


// این قابلیت فقط باعث میشه که برنامه سازماندهی درست بشه و از اضافه شدن روت ها توی یک فایل جلوگیری میشه



app.listen(3000)




